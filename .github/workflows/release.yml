name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            arch: aarch64
            platform: macos
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: amd64
            platform: macos
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: amd64
            platform: linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            arch: arm64
            platform: linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: amd64
            platform: windows

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install lua@5.4

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y liblua5.4-dev
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu liblua5.4-dev:arm64
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri https://luabinaries.sourceforge.net/download.html -OutFile lua.html
          # 注意：Windows上的lua54安装可能需要更复杂的步骤，这里需要根据实际情况调整
          # 可能需要从源码编译或使用预编译的二进制包

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          LUA_INCLUDE_DIR: ${{ matrix.os == 'macos-latest' && '/usr/local/include/lua5.4' || '/usr/include/lua5.4' }}
          LUA_LIB_DIR: ${{ matrix.os == 'macos-latest' && '/usr/local/lib' || '/usr/lib' }}

      - name: Rename binary
        run: |
          $output_name = "dbhub-${{ matrix.platform }}-${{ matrix.arch }}"
          if ("${{ matrix.platform }}" -eq "windows") {
            $output_name += ".exe"
          }
          mv target/${{ matrix.target }}/release/dbhub $output_name

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}
          path: dbhub-${{ matrix.platform }}-${{ matrix.arch }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "./${{ matrix.asset_name }}.tar.gz"
          asset_name: "${{ matrix.asset_name }}.tar.gz"
          asset_content_type: application/gzip
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}
          path: dbhub-${{ matrix.platform }}-${{ matrix.arch }}*
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts