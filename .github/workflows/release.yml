name: Release

on:
  release:
    types: [created]

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dbhub
            asset_name: dbhub-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dbhub
            asset_name: dbhub-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dbhub
            asset_name: dbhub-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dbhub
            asset_name: dbhub-darwin-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Lua 5.4 development library
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y liblua5.4-dev
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install lua@5.4
          fi
        shell: bash

      - name: Set PKG_CONFIG_PATH
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "PKG_CONFIG_PATH=$(brew --prefix lua@5.4)/lib/pkgconfig" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Install cross-compilation tools
        if: runner.os == 'Linux' && contains(matrix.target, 'aarch64')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release/
          tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "./${{ matrix.asset_name }}.tar.gz"
          asset_name: "${{ matrix.asset_name }}.tar.gz"
          asset_content_type: application/gzip